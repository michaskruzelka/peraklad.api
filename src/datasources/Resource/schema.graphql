type Query {
    fileFormats(
        category: ProjectCategory!
        subCategory: ProjectSubCategory
    ): [FileFormat!]!
    ResourceItem(id: ID!): ResourceItem
    resourceItemStatuses: [ResourceItemStatus]!
}

type Mutation {
    CreateResource(
        projectId: String! @stringLength(min: 36, max: 36)
        language: String! @stringLength(min: 2, max: 2)
        fileName: String! @stringLength(min: 1, max: 50)
        file: Upload
        fileUrl: String @stringLength(max: 500)
        encoding: String @stringLength(max: 100)
    ): String!
}

type FileFormat {
    code: String!
    name: String!
    extensions: [String!]!
    longName: String
    description: String
}

type ResourceStatus {
    id: Int!
    code: String!
    name: String! @intl
}

type ResourceItemStatus {
    id: Int!
    code: String!
    name: String! @intl
}

type TranslationType {
    id: Int!
    code: String!
}

type TranslationService {
    id: Int!
    code: String!
    name: String!
}

type TranslationStatus {
    id: Int!
    code: String!
}

type Translation {
    id: ID!
    text: String!
    status: TranslationStatus! @cypher(statement: "RETURN { id: this.status }")
    type: TranslationType! @cypher(statement: "RETURN { id: this.type }")
    service: TranslationService
        @cypher(statement: "RETURN { id: this.service }")
    resourceItem: ResourceItem @relation(name: "FOR", direction: OUT)
}

type Duration {
    hours: Int!
    minutes: Int!
    seconds: Int!
    milliseconds: Int!
    total: Int!
    formatted: String!
}

type TimingFormat {
    fileFormat: FileFormat! @neo4j_ignore
    text: String!
}

type Timing {
    startsAt: Duration!
        @cypher(
            statement: """
            RETURN {
                hours: this.startsAt.hours,
                minutes: this.startsAt.minutesOfHour,
                seconds: this.startsAt.secondsOfMinute,
                milliseconds: this.startsAt.millisecondsOfSecond,
                total: this.startsAt.milliseconds,
                formatted: toString(this.startsAt)
            }
            """
        )
    endsAt: Duration!
        @cypher(
            statement: """
            RETURN {
                hours: this.endsAt.hours,
                minutes: this.endsAt.minutesOfHour,
                seconds: this.endsAt.secondsOfMinute,
                milliseconds: this.endsAt.millisecondsOfSecond,
                total: this.endsAt.milliseconds,
                formatted: toString(this.endsAt)
            }
            """
        )
    difference: Duration!
        @cypher(
            statement: """
            WITH duration({
                milliseconds: this.endsAt.milliseconds - this.startsAt.milliseconds
            }) AS diff
            RETURN {
                hours: diff.hours,
                minutes: diff.minutesOfHour,
                seconds: diff.secondsOfMinute,
                milliseconds: diff.millisecondsOfSecond,
                total: diff.milliseconds,
                formatted: toString(diff)
            }
            """
        )
    formatted: [TimingFormat!]
        @cypher(
            statement: """
            MATCH (this)-[*]-(p:Project)
            WITH DISTINCT p, this
            RETURN {
                text: {
                    labels: labels(p),
                    startsAt: {
                        hours: this.startsAt.hours,
                        minutes: this.startsAt.minutesOfHour,
                        seconds: this.startsAt.secondsOfMinute,
                        milliseconds: this.startsAt.millisecondsOfSecond,
                        total: this.startsAt.milliseconds
                    },
                    endsAt: {
                        hours: this.endsAt.hours,
                        minutes: this.endsAt.minutesOfHour,
                        seconds: this.endsAt.secondsOfMinute,
                        milliseconds: this.endsAt.millisecondsOfSecond,
                        total: this.endsAt.milliseconds
                    }
                }
            }
            """
        )
}

type Recommendation {
    language: Language! @cypher(statement: "RETURN { code: this.language }")
    text: String!
    createdAt: DateTime!
    timing: Timing @relation(name: "HAS_TIMING", direction: OUT)
}

type SRT {
    coordinates: String
}

type VTT {
    cueSettings: String
}

# add XLIFF and others

union Format = SRT | VTT

interface ResourceItemContext {
    formats: [Format] @relation(name: "SPECIFIC_FOR", direction: OUT)
}

type Subtitle implements ResourceItemContext {
    formats: [Format] @relation(name: "SPECIFIC_FOR", direction: OUT)
    timing: Timing! @relation(name: "HAS_TIMING", direction: OUT)
}

type SoftwareElement implements ResourceItemContext {
    formats: [Format] @relation(name: "SPECIFIC_FOR", direction: OUT)
    key: String
}

type Comment {
    id: ID!
    text: String!
    resourceItem: ResourceItem @relation(name: "IN", direction: OUT)
}

input ResourceItemFilter {
    statuses: [Int]! = [] @listLength(max: 10) @range(min: 1, max: 10)
    text: String! = "" @stringLength(max: 100)
    withCommentsOnly: Boolean
    withSuggestionsOnly: Boolean
}

type ResourceItem {
    id: ID!
    text: String!
    status: ResourceItemStatus! @cypher(statement: "RETURN { id: this.status }")
    nextItem: ResourceItem @relation(name: "NEXT", direction: OUT)
    prevItem: ResourceItem @relation(name: "NEXT", direction: IN)
    nextItems(
        filter: ResourceItemFilter!
        limit: Int! = 50 @range(min: 1, max: 100)
    ): [ResourceItem]
        @cypher(
            statement: """
            MATCH (this)-[:NEXT*1..100]->(ni:ResourceItem)
            OPTIONAL MATCH (ni)<-[:FOR]-(t:Translation)
            WITH ni, t
            WHERE ($filter.statuses IS NULL
                OR size($filter.statuses) = 0
                OR ni.status IN $filter.statuses)
            AND (ni.text =~ '(?iu).*' + coalesce($filter.text, '') + '.*'
                OR t.text =~ '(?iu).*' + coalesce($filter.text, '') + '.*')
            AND (NOT coalesce($filter.withSuggestionsOnly, false) OR EXISTS((ni)<-[:FOR]-(:Translation)))
            AND (NOT coalesce($filter.withCommentsOnly, false) OR EXISTS((ni)<-[:IN]-(:Comment)))
            RETURN DISTINCT ni LIMIT toInteger($limit)
            """
        )
    prevItems(
        filter: ResourceItemFilter!
        limit: Int! = 50 @range(min: 1, max: 100)
    ): [ResourceItem]
        @cypher(
            statement: """
            MATCH (this)<-[:NEXT*1..100]-(pi:ResourceItem)
            OPTIONAL MATCH (pi)<-[:FOR]-(t:Translation)
            WITH pi, t
            WHERE ($filter.statuses IS NULL
                OR size($filter.statuses) = 0
                OR pi.status IN $filter.statuses)
            AND (pi.text =~ '(?iu).*' + coalesce($filter.text, '') + '.*'
                OR t.text =~ '(?iu).*' + coalesce($filter.text, '') + '.*')
            AND (NOT coalesce($filter.withSuggestionsOnly, false) OR EXISTS((pi)<-[:FOR]-(:Translation)))
            AND (NOT coalesce($filter.withCommentsOnly, false) OR EXISTS((pi)<-[:IN]-(:Comment)))
            RETURN DISTINCT pi LIMIT toInteger($limit)
            """
        )
    translation: [Translation] @relation(name: "FOR", direction: IN)
    context: ResourceItemContext! @relation(name: "HAS_CONTEXT", direction: OUT)
    comment: [Comment] @relation(name: "IN", direction: IN)
    recommendation: [Recommendation] @relation(name: "FOR", direction: IN)
    similar: [ResourceItem]
}

type Resource {
    id: ID!
    name: String!
    language: Language! @cypher(statement: "RETURN { code: this.language }")
    status: ResourceStatus! @cypher(statement: "RETURN { id: this.status }")
    project: Project!
        @cypher(statement: "MATCH (this)<-[:TRANSLATING]-(p:Project) RETURN p")
    format: FileFormat!
        @cypher(
            statement: """
            MATCH (this)<-[:TRANSLATING]-(p:Project)
            RETURN { code: { _code: this.format, _labels: labels(p) } }
            """
        )
    firstItem: ResourceItem @relation(name: "FIRST_ITEM", direction: OUT)
    lastItem: ResourceItem @relation(name: "LAST_ITEM", direction: OUT)
    foundItem(filter: ResourceItemFilter!): ResourceItem
        @cypher(
            statement: """
            MATCH (this)-[:FIRST_ITEM]->(:ResourceItem)-[:NEXT*0..]->(ri:ResourceItem)
            OPTIONAL MATCH (ri)<-[:FOR]-(t:Translation)
            WITH ri, t
            WHERE ($filter.statuses IS NULL
                OR size($filter.statuses) = 0
                OR ri.status IN $filter.statuses)
            AND (ri.text =~ '(?iu).*' + coalesce($filter.text, '') + '.*'
                OR t.text =~ '(?iu).*' + coalesce($filter.text, '') + '.*')
            AND (NOT coalesce($filter.withSuggestionsOnly, false) OR EXISTS((ri)<-[:FOR]-(:Translation)))
            AND (NOT coalesce($filter.withCommentsOnly, false) OR EXISTS((ri)<-[:IN]-(:Comment)))
            RETURN DISTINCT ri LIMIT 1
            """
        )
}
