type Query {
    projectAccessTypes: [ProjectAccessType!]!
    defaultProjectAccessType: ProjectAccessType!
    imdbSubtitles(
        languages: [String!]! @stringLength(min: 2, max: 2)
        imdbId: String! @stringLength(min: 7, max: 9)
        season: Int @range(min: 0, max: 100)
        episode: Int @range(min: 0, max: 100)
        limit: Int @range(min: 0, max: 10)
    ): ImdbSubtitlesResponse
}

type ImdbSubtitlesResponse {
    service: SubtitlesSearchService!
    filesInfo: [ImdbSubtitlesFile]!
}

type ImdbSubtitlesFile {
    url: String!
    fileName: String!
    encoding: String!
    format: FileFormat!
    language: Language!
}

type SubtitlesSearchService {
    code: String!
    name: String!
}

type ProjectAccessType {
    id: Int!
    code: String!
    isDefault: Boolean!
}

type ProjectLevel {
    id: Int!
    code: String!
}

type ProjectStatus {
    id: Int!
    code: String!
}

type ProjectSettings {
    abc: ABC! @cypher(statement: "RETURN { id: this.abc }")
    access: ProjectAccessType! @cypher(statement: "RETURN { id: this.access }")
    spelling: Spelling! @cypher(statement: "RETURN {id: this.spelling}")
    status: ProjectStatus! @cypher(statement: "RETURN { id: this.status }")
}

interface Project {
    id: ID!
    name: String!
    level: ProjectLevel!
    createdAt: DateTime!
    updatedAt: DateTime!
    category: ProjectCategory!
    subCategory: ProjectSubCategory
    description: String
    settings: ProjectSettings
    resource: Resource
}

type MovieSubtitles implements Project {
    id: ID!
    name: String!
    level: ProjectLevel! @cypher(statement: "RETURN { id: this.level }")
    createdAt: DateTime!
    updatedAt: DateTime!
    category: ProjectCategory! @cypher(statement: "RETURN labels(this)")
    subCategory: ProjectSubCategory @cypher(statement: "RETURN labels(this)")
    description: String
    settings: ProjectSettings @relation(name: "HAS_SETTINGS", direction: OUT)
    resource: Resource @relation(name: "TRANSLATING", direction: OUT)
    # imdb: [IMDB] @relation(name: "HAS_INFO", direction: OUT)
}

# type VideoStreamSubtitles implements Project {

# }

enum ProjectCategory {
    SUBTITLES
    SOFTWARE
}

enum ProjectSubCategory {
    MOVIE
    VIDEO_STREAM
}
