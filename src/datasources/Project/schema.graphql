type Query {
    projectAccessTypes: [ProjectAccessType!]!
    defaultProjectAccessType: ProjectAccessType!
    imdbSubtitles(
        service: SubtitlesService
        languages: [String!]!
            @stringLength(min: 2, max: 2)
            @listLength(min: 1, max: 10)
        imdbId: String! @stringLength(min: 7, max: 9)
        season: Int @range(min: 0, max: 100)
        episode: Int @range(min: 0, max: 100)
        limit: Int @range(min: 0, max: 10)
    ): ImdbSubtitlesResponse
}

type ImdbSubtitlesResponse {
    service: SubtitlesSearchService!
    filesInfo: [ImdbSubtitlesFile]!
}

type ImdbSubtitlesFile {
    url: String!
    fileName: String!
    encoding: String
    format: FileFormat!
    language: Language!
}

type SubtitlesSearchService {
    code: String!
    name: String!
}

type ProjectAccessType {
    id: Int!
    code: String!
    isDefault: Boolean!
}

type ProjectLevel {
    id: Int!
    code: String!
}

type ProjectStatus {
    id: Int!
    code: String!
}

type ProjectSettings {
    abc: ABC! @cypher(statement: "RETURN { id: this.abc }")
    access: ProjectAccessType! @cypher(statement: "RETURN { id: this.access }")
    spelling: Spelling! @cypher(statement: "RETURN {id: this.spelling}")
    status: ProjectStatus! @cypher(statement: "RETURN { id: this.status }")
}

interface IMDB {
    title: String!
    imdbId: String
    imdbRating: Float
    posterSrc: String
}

type Movie implements IMDB {
    title: String!
    imdbId: String
    imdbRating: Float
    posterSrc: String
    language: Language! @cypher(statement: "RETURN { code: this.language }")
    year: Int
}

type Episode implements IMDB {
    title: String!
    imdbId: String
    imdbRating: Float
    posterSrc: String
    episodeNum: Int!
    seasonNum: Int!
    year: Int
}

type Series implements IMDB {
    title: String!
    imdbId: String
    imdbRating: Float
    posterSrc: String
    language: Language! @cypher(statement: "RETURN { code: this.language }")
}

interface Project {
    id: ID!
    name: String!
    level: ProjectLevel!
        @cypher(statement: "MATCH (this) RETURN { id: this.level }")
    createdAt: DateTime!
    updatedAt: DateTime!
    category: ProjectCategory! @neo4j_ignore
    subCategory: ProjectSubCategory @neo4j_ignore
    description: String
    settings: ProjectSettings @relation(name: "HAS_SETTINGS", direction: OUT)
    resource: Resource @relation(name: "TRANSLATING", direction: OUT)
    parent: Project
        @relation(name: "IS_PARENT_OF", direction: IN)
        @cost(value: 2)
    children: [Project]
        @relation(name: "IS_PARENT_OF", direction: OUT)
        @cost(value: 3)
}

type MovieSubtitles implements Project {
    id: ID!
    name: String!
    level: ProjectLevel!
        @cypher(statement: "MATCH (this) RETURN { id: this.level }")
    createdAt: DateTime!
    updatedAt: DateTime!
    category: ProjectCategory! @neo4j_ignore
    subCategory: ProjectSubCategory @neo4j_ignore
    description: String
    settings: ProjectSettings @relation(name: "HAS_SETTINGS", direction: OUT)
    resource: Resource @relation(name: "TRANSLATING", direction: OUT)
    parent: MovieSubtitles
        @relation(name: "IS_PARENT_OF", direction: IN)
        @cost(value: 2)
    children: [MovieSubtitles]
        @relation(name: "IS_PARENT_OF", direction: OUT)
        @cost(value: 3)
    imdb: [IMDB] @relation(name: "HAS_INFO", direction: OUT)
}

type VideoStreamService {
    id: Int!
    code: String!
}

type VideoInfo {
    service: VideoStreamService
        @cypher(statement: "RETURN { id: this.service }")
    url: String!
    language: Language @cypher(statement: "RETURN { code: this.language }")
}

type VideoStreamSubtitles implements Project {
    id: ID!
    name: String!
    level: ProjectLevel!
        @cypher(statement: "MATCH (this) RETURN { id: this.level }")
    createdAt: DateTime!
    updatedAt: DateTime!
    category: ProjectCategory! @neo4j_ignore
    subCategory: ProjectSubCategory @neo4j_ignore
    description: String
    settings: ProjectSettings @relation(name: "HAS_SETTINGS", direction: OUT)
    resource: Resource @relation(name: "TRANSLATING", direction: OUT)
    parent: VideoStreamSubtitles
        @relation(name: "IS_PARENT_OF", direction: IN)
        @cost(value: 2)
    children: [VideoStreamSubtitles]
        @relation(name: "IS_PARENT_OF", direction: OUT)
        @cost(value: 3)
    videoInfo: [VideoInfo] @relation(name: "HAS_INFO", direction: OUT)
}

enum ProjectCategory {
    SUBTITLES
    SOFTWARE
}

enum ProjectSubCategory {
    MOVIE
    VIDEO_STREAM
}

enum SubtitlesService {
    OPENSUBTITLES
    YIFY
}
